const { Telegraf, Markup } = require("telegraf");
const { message } = require("telegraf/filters");

require('dotenv').config();

const TOKEN = process.env.TELEGRAM_TOKEN;
if (!TOKEN) throw new Error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");

const bot = new Telegraf(TOKEN);

// ================== –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ==================
const shops = [
  { name: "Hummus Kimchi", lat: 40.186333, lon: 44.507424, yandexId: "10247476118" },
  { name: "Gargoyle & Kruzhok", lat: 40.180624, lon: 44.498734, yandexId: "84867664974" },
  { name: "Garage Ara Specialty Coffee", lat: 40.185853, lon: 44.506910, yandexId: "12566712203" },
  { name: "Tut. plantstore", lat: 40.184652, lon: 44.510679, yandexId: "100941354140" },
  { name: "Always Tea", lat: 40.174043, lon: 44.512515, yandexId: "182996070769" },
  { name: "13: 20", lat: 40.180022, lon: 44.511872, yandexId: "245019164323" },
];

// ================== –ü—Ä–æ–¥—É–∫—Ç—ã ==================
const products = [  
  {
    name: "–§–æ—Ç–æ—Å–µ—Å—Å–∏—è",
    description:
      "–≠—Ç–æ –º–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç –º–æ–µ–≥–æ –ø—Ä–∞–¥–µ–¥–∞! –ú–æ—è –∫—Ä–∞—Å–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ 30-—Ç–∏ –ø–∏–∫—Å–µ–ª—è—Ö!",
    photo_url:
      "https://drive.google.com/uc?export=download&id=19NlVbqJ0uD5ZuJzgzSxOQYo0IK26IX9a",
  },
  {
    name: "–Ø –Ω–∞ –æ—Ç–¥—ã—Ö–µ",
    description: "–≠—Ç–æ —è –ø—Ä–∏–µ—Ö–∞–ª–∞ –≤ –≥–µ–ª–µ–Ω–¥–∂–∏–∫ –ø–æ–∑–∞–≥–æ—Ä–∞—Ç—å",
    photo_url:
      "https://drive.google.com/uc?export=download&id=1r-Q4jwRrxvGZdNXhKDDPFZXlQDzGIjKc",
  },
  {
    name: "–õ—é–±–æ–≤—å",
    description:
      "–≠—Ç–æ –º–æ—è —Ç–∞–π–Ω–∞—è –ª—é–±–æ–≤—å - –±–æ–µ–≤–∏–∫ –∏–∑ —Å–æ—Å–∏—Å–æ—á–Ω—ã—Ö –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤. –ü—Ä–∏—á–∏–Ω–∞ –º–æ–∏—Ö –±–µ—Å—Å–æ–Ω–Ω—ã—Ö –Ω–æ—á–µ–πüò≠",
    photo_url:
      "https://drive.google.com/uc?export=download&id=1av9zLKX5x-7XmWTLL3nTbEE9SGpxXY_4",
  },
  {
    name: "–ß–∏—Å—Ç–µ–π—à–∞—è —Ä–æ–¥–Ω–∏–∫–æ–≤–∞—è –≤–æ–¥–∞",
    description:
      "–í–æ–¥–∞ –ø—Ä—è–º–∏–∫–æ–º –∏–∑ –Ω–µ–¥—Ä –∑–µ–º–ª–∏, –ø—Ä–æ—à–ª–∞ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏",
    photo_url:
      "https://drive.google.com/uc?export=download&id=1xhs76oLEJaubgwupk0JgAJG1_ykrbxZk",
  },

];

// ================== –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ ==================
function haversine(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const toRad = (deg) => (deg * Math.PI) / 180;
  const dlat = toRad(lat2 - lat1);
  const dlon = toRad(lon2 - lon1);
  const a =
    Math.sin(dlat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dlon / 2) ** 2;
  return 2 * R * Math.asin(Math.sqrt(a));
}

// ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ ==================
const locationKeyboard = Markup.keyboard([
  [{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location: true }]
]).resize();

// ================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==================
const mainKeyboard = Markup.keyboard([
  [{ text: "üìç –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", request_location: true  }],
  [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–Ω–∂" }]
]).resize();




// ================== –°—Ç–∞—Ä—Ç==================
bot.start((ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
    mainKeyboard
  )
);

// ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ==================
bot.hears("üìç –ì–¥–µ –∫—É–ø–∏—Ç—å ARAX?", (ctx) =>
  ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üè™",
    locationKeyboard
  )
);
bot.hears("–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–Ω–∂", async (ctx) => {
  for (const product of products) {
    await ctx.replyWithPhoto(product.photo_url, {
      caption: `<b>${product.name}</b>\n${product.description}`,
      parse_mode: "HTML",
    });
  }
});

bot.command("show_locations", (ctx) =>
  ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –≥–¥–µ –∫—É–ø–∏—Ç—å ARAX",
    locationKeyboard
  )
);





// ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π ==================
bot.on(message("location"), async (ctx) => {
  if (ctx.message.location) {
    const { latitude, longitude } = ctx.message.location;

    const nearest = shops
      .map((shop) => ({
        ...shop,
        dist: haversine(latitude, longitude, shop.lat, shop.lon),
      }))
      .sort((a, b) => a.dist - b.dist)
      .slice(0, 6);


    let text = "üìç –¢–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏:\n\n";
    nearest.forEach((shop, i) => {
      const yandexLink = `https://yandex.com/maps/org/${shop.yandexId}`;
      text += `${i + 1}. <a href="${yandexLink}">${shop.name}</a> ‚Äî ${shop.dist.toFixed(2)} –∫–º\n\n`;
    });
    

    try {
      await ctx.reply(text, { parse_mode: "HTML", disable_web_page_preview: true });
    } catch (error) {
      if (error.response && error.response.error_code === 403) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.chat.id}: –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    }
  }
});



bot.command("show_cringe", async (ctx) => {
  for (const product of products) {
    await ctx.replyWithPhoto(product.photo_url, {
      caption: `<b>${product.name}</b>\n${product.description}`,
      parse_mode: "HTML",
    });
  }
});

// ================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==================
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ");

bot.catch((err, ctx) => {
  if (err.response && err.response.error_code === 403) {
    console.log(`–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.chat.id}`);
  } else {
    console.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegraf:", err);
  }
});

