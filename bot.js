import { Telegraf, Scenes, session, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import { shops, basicRecepie, products } from './data.js';
import 'dotenv/config';

const TOKEN = process.env.TELEGRAM_TOKEN;
if (!TOKEN) throw new Error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");

const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
if (!ADMIN_CHAT_ID) throw new Error("–ù–µ –∑–∞–¥–∞–Ω ADMIN_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");

const bot = new Telegraf(TOKEN);

const userCarts = {}; // { userId: [{ id, name, quantity }] }

// ================== –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ ==================
function haversine(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const toRad = (deg) => (deg * Math.PI) / 180;
  const dlat = toRad(lat2 - lat1);
  const dlon = toRad(lon2 - lon1);
  const a =
    Math.sin(dlat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dlon / 2) ** 2;
  return 2 * R * Math.asin(Math.sqrt(a));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
function showCart(ctx) {
  const userId = ctx.from.id;
  const cart = userCarts[userId];

  if (!cart || cart.length === 0) {
      return ctx.reply("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", mainKeyboard); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  }

  let cartMessage = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
  cart.forEach(item => {
      cartMessage += `‚ñ™Ô∏è ${item.name} \- *${item.quantity} —à—Ç.*\n`;
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (ctx.callbackQuery) {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.editMessageText(cartMessage, { parse_mode: "Markdown", ...cartKeyboard });
  } else {
      // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      ctx.reply(cartMessage, { parse_mode: "Markdown", ...cartKeyboard });
  }
}

// ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ ==================
const locationKeyboard = Markup.keyboard([
  [{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location: true }]
]).resize();

// ================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==================
const mainKeyboard = Markup.keyboard([
  [{ text: "üìç –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏", request_location: true  }],
  [{ text: "üí© –†–µ—Ü–µ–ø—Ç—ã —Å ARAX" }],
  [{ text: "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" }],
]).resize();

// –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
const cancelOrderInlineKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "cancel_order")]
]);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
const cartKeyboard = Markup.inlineKeyboard([
  Markup.button.callback("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "checkout"),
  Markup.button.callback("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "clear_cart"),
  Markup.button.callback("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –µ—â–µ", "back_to_products")
]);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ 
const createProductsKeyboard = () => {
  const flavorButtons = products.map(product =>
      Markup.button.callback(product.name, `recipe_${product.id}`)
  );
  return Markup.inlineKeyboard(
      Array.from({ length: Math.ceil(flavorButtons.length / 2) }, (_, i) =>
          flavorButtons.slice(i * 2, i * 2 + 2)
      )
  );
};

// ============ –ù–ê–°–¢–†–û–ô–ö–ê –°–¶–ï–ù –î–õ–Ø –°–ë–û–†–ê –î–ê–ù–ù–´–• ===============

// –°—Ü–µ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
const quantityScene = new Scenes.WizardScene(
  'quantityScene',
  // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  async (ctx) => {
      const productId = ctx.wizard.state.productId;
      const product = products.find(p => p.id === productId);
      await ctx.reply(`–°–∫–æ–ª—å–∫–æ "${product.name}" –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?`);
      return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤
  async (ctx) => {
      const quantity = parseInt(ctx.message.text);
      const productId = ctx.wizard.state.productId;
      const product = products.find(p => p.id === productId);
      const userId = ctx.from.id;

      if (isNaN(quantity) || quantity <= 0) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
      if (!userCarts[userId]) {
          userCarts[userId] = [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const cartItem = userCarts[userId].find(item => item.id === productId);

      if (cartItem) {
          cartItem.quantity += quantity; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      } else {
          userCarts[userId].push({ ...product, quantity: quantity }); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      }

      await ctx.reply(`‚úÖ "${product.name}" (${quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      showCart(ctx);

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
      return ctx.scene.leave();
  }
);

// –°—Ü–µ–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
const orderScene = new Scenes.WizardScene(
  'orderScene',
  // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
  async (ctx) => {
      await ctx.reply('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', cancelOrderInlineKeyboard);
      return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  async (ctx) => {
      if (!ctx.message || !ctx.message.text) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:');
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }
      // –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
      const text = ctx.message.text.trim();
      if (/^–æ—Ç–º–µ–Ω–∞$/i.test(text) || /^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$/i.test(text)) {
          await ctx.reply('‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainKeyboard);
          return ctx.scene.leave();
      }
      ctx.wizard.state.name = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', cancelOrderInlineKeyboard);
      return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
  async (ctx) => {
      if (!ctx.message || !ctx.message.text) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }
      // –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
      const text = ctx.message.text.trim();
      if (/^–æ—Ç–º–µ–Ω–∞$/i.test(text) || /^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$/i.test(text)) {
          await ctx.reply('‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainKeyboard);
          return ctx.scene.leave();
      }
      ctx.wizard.state.phone = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ', cancelOrderInlineKeyboard);
      return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
  async (ctx) => {
      if (!ctx.message || !ctx.message.text) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:');
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }
      // –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
      const text = ctx.message.text.trim();
      if (/^–æ—Ç–º–µ–Ω–∞$/i.test(text) || /^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$/i.test(text)) {
          await ctx.reply('‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainKeyboard);
          return ctx.scene.leave();
      }
      ctx.wizard.state.address = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
      const userId = ctx.from.id;
      const cart = userCarts[userId];
      const { name, phone, address } = ctx.wizard.state;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
      let orderText = `*üî• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! üî•*\n\n`;
      orderText += `*–ö–ª–∏–µ–Ω—Ç:* ${name}\n`;
      orderText += `*–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\n`;
      orderText += `*–ê–¥—Ä–µ—Å:* ${address}\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º Telegram username –µ—Å–ª–∏ –µ—Å—Ç—å
      if (ctx.from.username) {
          const safeUsername = ctx.from.username.replace(/_/g, "\\_");
          orderText += `*Telegram username:* @${safeUsername}\n`;
      } else {
          orderText += `*Telegram ID:* ${ctx.from.id}\n`;
      }
      
      orderText += `\n*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`;
      cart.forEach(item => {
          orderText += `- ${item.name}: ${item.quantity} —à—Ç.\n`;
      });

      // ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à ID –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã)
      const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID; // <-- –£–∫–∞–∂–∏—Ç–µ ID –≤ .env —Ñ–∞–π–ª–µ
      if(!ADMIN_CHAT_ID) throw new Error("–ù–µ –∑–∞–¥–∞–Ω ADMIN_CHAT_ID");


      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await bot.telegram.sendMessage(ADMIN_CHAT_ID, orderText, { parse_mode: 'Markdown' });

      // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—Ö–µ
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.');

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      userCarts[userId] = [];

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
      return ctx.scene.leave();
  }
);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å—Ü–µ–Ω—ã
const stage = new Scenes.Stage([quantityScene, orderScene]);
bot.use(session());
bot.use(stage.middleware());

// ================== –°—Ç–∞—Ä—Ç==================
bot.start((ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
    mainKeyboard
  )
);

// ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ==================
bot.hears("üìç –ì–¥–µ –∫—É–ø–∏—Ç—å ARAX?", (ctx) =>
  ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üè™",
    locationKeyboard
  )
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
bot.hears("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", (ctx) => {
  let message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:\n";

  // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const productButtons = products.map(p => [
      Markup.button.callback(
          `‚ûï ${p.name}`, // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
          `select_product_${p.id}` // Callback-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      )
  ]);

  ctx.reply(message, Markup.inlineKeyboard(productButtons));
});

bot.hears("üí© –†–µ—Ü–µ–ø—Ç—ã —Å ARAX", async (ctx) => {

  const keyboard = createProductsKeyboard();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –±–∞–∑–æ–≤—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º –ò –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  await ctx.replyWithPhoto(basicRecepie.photo_url, {
      caption: `<b>${basicRecepie.name}</b>\n${basicRecepie.description}`,
      parse_mode: "HTML",
      ...keyboard
  });
});

// ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê INLINE-–ö–ù–û–ü–ö–ò ==================
bot.action(/recipe_(.+)/, async (ctx) => {
  // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ 
  const productId  = ctx.match[1];

  // 2. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –≤ –Ω–∞—à–µ–º –º–∞—Å—Å–∏–≤–µ –ø–æ –∏–º–µ–Ω–∏
  const product = products.find(p => p.id === productId);

  // 3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  if (product) { 
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    const backKeyboard = Markup.inlineKeyboard([
        Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_basic_recipe")
    ]);
    //–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageMedia({
      type: 'photo',
      media: product.photo_url,
      caption: `<b>${product.name}</b>\n${product.description}`,
      parse_mode: 'HTML'
    }, backKeyboard);
  }

  // 4. –°–æ–æ–±—â–∞–µ–º –¢–µ–ª–µ–≥—Ä–∞–º—É, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ.
  await ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
bot.action(/select_product_(.+)/, async (ctx) => {
  const productId = ctx.match[1];
  const product = products.find(p => p.id === productId);

  if (!product) {
      return ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π productId
  await ctx.scene.enter('quantityScene', { productId: productId });
});

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
bot.action("clear_cart", async (ctx) => {
  const userId = ctx.from.id;
  userCarts[userId] = []; // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
  await ctx.answerCbQuery("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!");
  await ctx.editMessageText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
});

// –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
bot.action("checkout", async (ctx) => {
  const userId = ctx.from.id;
  if (!userCarts[userId] || userCarts[userId].length === 0) {
      return ctx.answerCbQuery("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
  }

  // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  await ctx.scene.enter('orderScene');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—Ç –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
bot.action("back_to_products", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage();

  let message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:\n";
  const productButtons = products.map(p => [
      Markup.button.callback(
          `‚ûï ${p.name}`,
          `select_product_${p.id}`
      )
  ]);

  await ctx.reply(message, Markup.inlineKeyboard(productButtons));
});

bot.action("back_to_menu", async (ctx) => {
  // 1. –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏, —Å–æ–æ–±—â–∞—è Telegram, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ
  await ctx.answerCbQuery();

  // 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –µ–µ –∫–Ω–æ–ø–∫–∞–º–∏
  await ctx.deleteMessage();

  // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  await ctx.reply("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üëá", mainKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–æ—Ç–º–µ–Ω—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
bot.action("cancel_order", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainKeyboard);
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (ctx.scene && ctx.scene.current) {
    await ctx.scene.leave();
  }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action("back_to_basic_recipe", async (ctx) => {
  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  const keyboard = createProductsKeyboard();

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
  await ctx.editMessageMedia({
      type: 'photo',
      media: basicRecepie.photo_url,
      caption: `<b>${basicRecepie.name}</b>\n${basicRecepie.description}`,
      parse_mode: "HTML"
  }, keyboard);

  await ctx.answerCbQuery();
});

bot.command("show_locations", (ctx) =>
  ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –≥–¥–µ –∫—É–ø–∏—Ç—å ARAX",
    locationKeyboard
  )
);

// ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–π ==================
bot.on(message("location"), async (ctx) => {
  if (ctx.message.location) {
    const { latitude, longitude } = ctx.message.location;

    const nearest = shops
      .map((shop) => ({
        ...shop,
        dist: haversine(latitude, longitude, shop.lat, shop.lon),
      }))
      .sort((a, b) => a.dist - b.dist)
      .slice(0, 6);

    let text = "üìç –¢–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏:\n\n";
    nearest.forEach((shop, i) => {
      const yandexLink = `https://yandex.com/maps/org/${shop.yandexId}`;
      text += `${i + 1}. <a href="${yandexLink}">${shop.name}</a> ‚Äî ${shop.dist.toFixed(2)} –∫–º\n\n`;
    });
    
    try {
      await ctx.reply(text, { parse_mode: "HTML", disable_web_page_preview: true });
    } catch (error) {
      if (error.response && error.response.error_code === 403) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.chat.id}: –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    }
  }
});



bot.command("show_lemonades", async (ctx) => {
  for (const product of products) {
    await ctx.replyWithPhoto(product.photo_url, {
      caption: `<b>${product.name}</b>\n${product.description}`,
      parse_mode: "HTML",
    });
  }
});

// ================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==================
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ");

bot.catch((err, ctx) => {
  if (err.response && err.response.error_code === 403) {
    console.log(`–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.chat.id}`);
  } else {
    console.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegraf:", err);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
const gracefulStop = (signal) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
  bot.stop(signal).then(() => {
    console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å.');
    process.exit(0);
  });
};

// –õ–æ–≤–∏–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once("SIGINT", () => gracefulStop("SIGINT"));
process.once("SIGTERM", () => gracefulStop("SIGTERM"));